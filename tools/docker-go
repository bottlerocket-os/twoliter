#!/usr/bin/env bash

# Helper script for running commands in a golang build/runtime environment for testing/vendoring/building a go module

set -e -o pipefail

usage() {
   cat >&2 <<EOF
$(basename "${0}")
                --module-path <path to Go module>
                --go-version <go version>
                --go-mod-cache <path to set up the go mod cache>
                --command "<command to run>"
Runs

Required:
    --module-path               The path of the Go module to mount into the container
    --go-version                Version of Go to use
    --go-mod-cache              The Go module cache path to mount into the container
    --command                   The command to run in the golang container
EOF
}

required_arg() {
   local arg="${1:?}"
   local value="${2}"
   if [ -z "${value}" ]; then
      echo "ERROR: ${arg} is required" >&2
      exit 2
   fi
}

parse_args() {
  while [ ${#} -gt 0 ] ; do
    case "${1}" in
        --help ) usage; exit 0 ;;
        --module-path ) shift; GO_MODULE_PATH="${1}" ;;
        --go-version ) shift; GO_VERSION="${1}" ;;
        --go-mod-cache ) shift; GO_MOD_CACHE="${1}" ;;
        --command ) shift; COMMAND="${@:1}" ;;
        *) ;;
    esac
    shift
  done

  # Required arguments
  required_arg "--module-path" "${GO_MODULE_PATH}"
  required_arg "--go-version" "${GO_VERSION}"
  required_arg "--go-mod-cache" "${GO_MOD_CACHE}"
  required_arg "--command" "${COMMAND}"
}

DOCKER_RUN_ARGS="--network=host"

parse_args "${@}"

docker run --rm \
  -e GOPRIVATE='*' \
  -e GOCACHE='/tmp/.cache' \
  --user "$(id -u):$(id -g)" \
  ${DOCKER_RUN_ARGS} \
  -v "${GO_MOD_CACHE}":/go/pkg/mod \
  -v "${GO_MODULE_PATH}":/usr/src/host-ctr \
  -w /usr/src/host-ctr \
  golang:${GO_VERSION} \
    bash -c "${COMMAND}"
